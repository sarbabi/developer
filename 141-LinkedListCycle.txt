# problem: https://leetcode.com/problems/linked-list-cycle/
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# solution: https://leetcode.com/problems/linked-list-cycle/discuss/2656867/List-Set-and-Two-Pointer-solutions
# idea 1: trace and add nodes to Set (hashtable) and search if previously added?
# idea 2: Floyd's cycle finding algorith, (tortoise and hare algorithm)


class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        # idea 1
        # seen = set()
        # while(head):
        #     if(head in seen):
        #         return True
        #     seen.add(head)
        #     head = head.next
        # return False
        
        #idea 2
        slow = fast = head
        while(fast is not None and fast.next is not None):
            slow = slow.next
            fast = fast.next.next
            if(slow == fast):
                return True
        return False